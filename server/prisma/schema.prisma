generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  member
}

enum ProcessingStatus {
  pending
  processing
  completed
  failed
}

enum MessageType {
  user
  ai
}

model User {
  id           String @id @default(cuid())
  email        String @unique
  passwordHash String @map("password_hash")
  name         String
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  createdWorkspaces Workspace[]     @relation("WorkspaceCreator")
  userWorkspaces    UserWorkspace[]
  invitations       Invitation[]    @relation("InvitationCreator")
  usedInvitations   Invitation[]    @relation("InvitationUser")
  documents         Document[]
  chatSessions      ChatSession[]
  messages          Message[]

  @@map("users")
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  creator        User            @relation("WorkspaceCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  userWorkspaces UserWorkspace[]
  invitations    Invitation[]
  documents      Document[]
  chatSessions   ChatSession[]

  @@map("workspaces")
}

model UserWorkspace {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  workspaceId String   @map("workspace_id")
  role        Role
  joinedAt    DateTime @default(now()) @map("joined_at")

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("user_workspaces")
}

model Invitation {
  id          String    @id @default(cuid())
  workspaceId String    @map("workspace_id")
  invitedBy   String    @map("invited_by")
  token       String    @unique @db.VarChar(32)
  role        Role      @default(member)
  expiresAt   DateTime  @map("expires_at")
  usedBy      String?   @map("used_by")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator   User      @relation("InvitationCreator", fields: [invitedBy], references: [id], onDelete: Cascade)
  user      User?     @relation("InvitationUser", fields: [usedBy], references: [id], onDelete: SetNull)

  @@index([token])
  @@map("invitations")
}

model Document {
  id               String           @id @default(cuid())
  workspaceId      String           @map("workspace_id")
  uploadedBy       String           @map("uploaded_by")
  filename         String
  filePath         String           @map("file_path")
  fileSize         Int              @map("file_size")
  processingStatus ProcessingStatus @default(pending) @map("processing_status")
  uploadedAt       DateTime         @default(now()) @map("uploaded_at")

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  uploader  User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  chunks    Chunk[]

  @@index([processingStatus])
  @@map("documents")
}

model Chunk {
  id         String   @id @default(cuid())
  documentId String   @map("document_id")
  content    String   @db.Text
  pageNumber Int      @map("page_number")
  chunkIndex Int      @map("chunk_index")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  document      Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  messageChunks MessageChunk[]

  @@index([documentId, chunkIndex])
  @@map("chunks")
}

model ChatSession {
  id          String   @id @default(cuid())
  workspaceId String   @map("workspace_id")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator   User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("chat_sessions")
}

model Message {
  id            String      @id @default(cuid())
  chatSessionId String      @map("chat_session_id")
  userId        String?     @map("user_id")
  content       String      @db.VarChar(4000)
  messageType   MessageType @map("message_type")
  createdAt     DateTime    @default(now()) @map("created_at")

  // Relations
  chatSession   ChatSession    @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  messageChunks MessageChunk[]

  @@index([chatSessionId, createdAt])
  @@map("messages")
}

model MessageChunk {
  id        String @id @default(cuid())
  messageId String @map("message_id")
  chunkId   String @map("chunk_id")

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  chunk   Chunk   @relation(fields: [chunkId], references: [id], onDelete: Cascade)

  @@map("message_chunks")
}
